package com.empconn.utilities;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.empconn.dto.Reporter;

public abstract class ExcelReportGenerator {

	public abstract List<String> headers();

	public abstract String sheetName();

	public abstract String reportType();

	public abstract boolean isPeriodOrTitleNeededAsPartOfForecastReport();

	public ByteArrayInputStream generate(List<? extends Reporter> reporters, String userName, String forecastHeader) throws IOException {
		try (Workbook workbook = new XSSFWorkbook(); ByteArrayOutputStream out = new ByteArrayOutputStream();) {
			final CreationHelper createHelper = workbook.getCreationHelper();

			final Sheet sheet = workbook.createSheet(sheetName());

			final Font headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.BLUE.getIndex());

			final CellStyle headerCellStyle = workbook.createCellStyle();
			headerCellStyle.setFont(headerFont);

			int rowIdx = 0;
			// Row for Summary
			final Row reportNameRow = sheet.createRow(rowIdx++);
			final Cell reportNameCell = reportNameRow.createCell(0);
			reportNameCell.setCellValue(String.format("%s Report (As-On %s)", reportType(), new SimpleDateFormat("dd-MMM-YYYY").format(new Date())).toString());
			reportNameCell.setCellStyle(headerCellStyle);

			if(isPeriodOrTitleNeededAsPartOfForecastReport()) {
				final Row periodNameRow = sheet.createRow(rowIdx++);
				final Cell periodCell = periodNameRow.createCell(0);
				periodCell.setCellValue(forecastHeader);
				periodCell.setCellStyle(headerCellStyle);
			}

			final Row userNameRow = sheet.createRow(rowIdx++);
			final Cell userNameCell = userNameRow.createCell(0);
			userNameCell.setCellValue(String.format("Generated By: %s", userName).toString());
			userNameCell.setCellStyle(headerCellStyle);

			// Row for Header
			final Row headerRow = sheet.createRow(rowIdx++);

			// Header
			for (int col = 0; col < headers().size(); col++) {
				final Cell cell = headerRow.createCell(col);
				cell.setCellValue(headers().get(col));
				cell.setCellStyle(headerCellStyle);
			}

			// CellStyle for Age
			final CellStyle percentageCellStyle = workbook.createCellStyle();
			percentageCellStyle.setDataFormat(createHelper.createDataFormat().getFormat("#"));

			for (final Reporter reporter : reporters) {
				final Row row = sheet.createRow(rowIdx++);

				final List<String> fieldNames = reporter.fieldNames();
				int cellCountIndex = 0;
				for (final String fieldName : fieldNames) {
					row.createCell(cellCountIndex++).setCellValue(ReflectionUtils.invokeGetter(reporter, fieldName));
				}

			}

			workbook.write(out);
			return new ByteArrayInputStream(out.toByteArray());
		}
	}

	public ByteArrayInputStream generate(List<? extends Reporter> reporters, String userName) throws IOException {
		return generate(reporters, userName, null);

	}

}